var probe = require("../probe");

var spawn = require('child_process').spawn;

function getOutput(cmd, args, callback) {
    var proc = spawn(cmd, args);
    var outputLines = [];
    var err = null;
    
    proc.stdout.on("data", function(buf) {
        outputLines.push(buf.toString("ascii"));
    });
    
    proc.on("error", function(error) {
        err = error;
    });
    
    proc.on("exit", function() {
        callback(err, outputLines.join("\n"));
    });
}

probe.define("forever/ps", function(args, callback) {
    getOutput("forever", ["list"], function(err, output) {
        if(output.indexOf("No forever processes running") !== -1) {
            callback(null, []);
        } else {
            var lines = output.split("\n");
            var processes = [];
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                var match = line.match(/(\w+\.js)/);
                if(!match)
                    continue;
                var scriptName = match[1].substring(3); // Get rid of the color stuff
                match = line.match(/(\d+):(\d+):(\d+):([\d\.]+)/)
                if(!match)
                    continue;
                var uptime = {
                    days: parseInt(match[1], 10),
                    hours: parseInt(match[2], 10),
                    minutes: parseInt(match[3], 10),
                    seconds: parseFloat(match[4], 10)
                };
                match = line.match(/([^\s]+.log)/);
                if(!match)
                    continue;
                var log = match[1].substring(5); // Get rid of the color stuff
                processes.push({script: scriptName, uptime: uptime, log: log});
            }
            callback(null, processes);
        }
    });
});

probe.define("forever/tail", function(args, callback) {
    var script = args.script;
    if(!script)
        return callback("no-script");
    probe.call("forever/ps", {}, function(err, processes) {
        var found = false;
        for (var i = 0; i < processes.length; i++) {
            var process = processes[i];
            if(process.script === script) {
                found = true;
                getOutput("tail", ["-25", process.log], function(err, result) {
                    if(err)
                        return callback(err);
                    callback(null, result.split("\n"));
                });
            }
        }
        if(!found)
            return callback("no-such-script");
    });
});