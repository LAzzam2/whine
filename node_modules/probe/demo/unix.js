var probe = require("../probe");

var spawn = require('child_process').spawn;

function getOutput(cmd, args, callback) {
    var proc = spawn(cmd, args);
    var outputLines = [];
    var err = null;
    
    proc.stdout.on("data", function(buf) {
        outputLines.push(buf.toString("ascii"));
    });
    
    proc.on("error", function(error) {
        err = error;
    });
    
    proc.on("exit", function() {
        callback(err, outputLines.join("\n"));
    });
}

probe.define("unix/uptime", function(args, callback) {
    getOutput("uptime", [], function(err, output) {
        if(err)
            return callback(err);
        var matches = output.match(/(.+)\s+(\d+)\s+users,\s+load averages?:\s+(.+)/);
        if(!matches)
            return callback("No match: " + output);

        var uptime = matches[1];
        var users = parseInt(matches[2], 10);
        var loads = matches[3].split(/\s+/).map(function(s) { return parseFloat(s, 10); });
        
        var days = 0;
        var hours = 0;
        var minutes = 0;
        
        if(uptime.indexOf("day") !== -1) {
            var result = uptime.match(/([0-9]+)\s+day/);
            if(result)
                days += parseInt(result[1], 10);
        }
        if(uptime.indexOf(":") !== -1) {
            var result = uptime.match(/([0-9]+):([0-9]+)/);
            if(result) {
                hours += parseInt(result[1], 10);
                minutes += parseInt(result[2], 10);
            }
        }
        if(uptime.indexOf("min") !== -1) {
            var result = uptime.match(/([0-9]+)\s+min/);
            if(result)
                minutes += parseInt(result[1], 10);
        }
        callback(null, {
            uptime: {days: days, hours: hours, minutes: minutes},
            users: users,
            loads: loads
        });
    });
});

probe.define("unix/ps", function(args, callback) {
    getOutput("ps", ["aux"], function(err, output) {
        if(err)
            return callback(err);
        var lines = output.split("\n");
        var processes = [];
        for (var i = 1; i < lines.length; i++) {
            var line = lines[i];
            var parts = line.split(/\s+/);
            var user = parts[0];
            var pid = parseInt(parts[1], 10);
            var cpuPerc = parseFloat(parts[2], 10);
            var memPerc = parseFloat(parts[3], 10);
            var cumTime = parts[9];
            var command = parts.slice(10).join(" ");
            if(!command) 
                continue;
            processes.push({
                user: parts[0],
                pid: pid,
                cpuPerc: cpuPerc,
                memPerc: memPerc,
                cumTime: cumTime,
                command: command
            });
        }
        callback(null, processes);
    });
});