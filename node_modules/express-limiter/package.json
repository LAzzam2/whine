{
  "name": "express-limiter",
  "version": "1.3.1",
  "description": "rate limiter middleware for express applications",
  "main": "index.js",
  "author": {
    "name": "Dustin Diaz"
  },
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ded/express-limiter.git"
  },
  "bugs": {
    "url": "https://github.com/ded/express-limiter/issues"
  },
  "homepage": "https://github.com/ded/express-limiter",
  "devDependencies": {
    "express": "4.0.0",
    "redis": "~0.10.1",
    "mocha": "~1.18.2",
    "chai": "~1.9.1",
    "sinon": "~1.9.0",
    "sinon-chai": "~2.5.0",
    "supertest": "~0.10.0",
    "valentine": "~2.0.2",
    "jshint": "~2.5.0"
  },
  "readme": "## Express rate-limiter\nRate limiting middleware for Express applications built on redis\n\n``` sh\nnpm install express-limiter --save\n```\n\n``` js\nvar express = require('express')\nvar app = express()\nvar client = require('redis').createClient()\n\nvar limiter = require('express-limiter')(app, client)\n\n/**\n * you may also pass it an Express 4.0 `Router`\n *\n * router = express.Router()\n * limiter = require('express-limiter')(router, client)\n */\n\nlimiter({\n  path: '/api/action',\n  method: 'get',\n  lookup: ['connection.remoteAddress'],\n  // 150 requests per hour\n  total: 150,\n  expire: 1000 * 60 * 60\n})\n\napp.get('/api/action', function (req, res) {\n  res.send(200, 'ok')\n})\n```\n\n### API options\n\n``` js\nlimiter(options)\n```\n\n - `path`: `String` *optional* route path to the request\n - `method`: `String` *optional* http method. accepts `get`, `post`, `put`, `delete`, and of course Express' `all`\n - `lookup`: `String|Array.<String>` value lookup on the request object. Can be a single value or array. See [examples](#examples) for common usages\n - `total`: `Number` allowed number of requests before getting rate limited\n - `expire`: `Number` amount of time in `ms` before the rate-limited is reset\n - `whitelist`: `function(req)` optional param allowing the ability to whitelist. return `boolean`, `true` to whitelist, `false` to passthru to limiter.\n - `skipHeaders`: `Boolean` whether to skip sending HTTP headers for rate limits ()\n - `ignoreErrors`: `Boolean` whether errors generated from redis should allow the middleware to call next().  Defaults to false.\n\n### Examples\n\n``` js\n// limit by IP address\nlimiter({\n  ...\n  lookup: 'connection.remoteAddress'\n  ...\n})\n\n// or if you are behind a trusted proxy (like nginx)\nlimiter({\n  lookup: 'headers.x-forwarded-for'\n})\n\n// by user (assuming a user is logged in with a valid id)\nlimiter({\n  lookup: 'user.id'\n})\n\n// limit your entire app\nlimiter({\n  path: '*',\n  method: 'all',\n  lookup: 'connection.remoteAddress'\n})\n\n// limit users on same IP\nlimiter({\n  path: '*',\n  method: 'all',\n  lookup: ['user.id', 'connection.remoteAddress']\n})\n\n// whitelist user admins\nlimiter({\n  path: '/delete/thing',\n  method: 'post',\n  lookup: 'user.id',\n  whitelist: function (req) {\n    return !!req.user.is_admin\n  }\n})\n\n// skip sending HTTP limit headers\nlimiter({\n  path: '/delete/thing',\n  method: 'post',\n  lookup: 'user.id',\n  whitelist: function (req) {\n    return !!req.user.is_admin\n  },\n  skipHeaders: true\n})\n\n```\n\n### as direct middleware\n\n``` js\napp.post('/user/update', limiter({ lookup: 'user.id' }), function (req, res) {\n  User.find(req.user.id).update(function (err) {\n    if (err) next(err)\n    else res.send('ok')\n  })\n})\n```\n\n## License MIT\n\nHappy Rate Limiting!\n",
  "readmeFilename": "README.md",
  "_id": "express-limiter@1.3.1",
  "_from": "express-limiter@1.x"
}
